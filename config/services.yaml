# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    maintenance_file_path: '%kernel.project_dir%/.maintenance'
    resources_url: '%env(resolve:RESOURCES_URL)%'
    resources_path: '%kernel.project_dir%/%env(RESOURCES_PATH)%'
    site_logo_path: '%resources_url%images/logo.bf5afcc7.png'
    favicon_path: '%resources_url%images/favicon.4a7c1d60.ico'
    admin_email: '%env(ADMIN_EMAIL)%'
    default_sender_email: '%env(DEFAULT_SENDER_SENDER)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $siteName: 'Nascar Results'
            $maintenanceFilePath: '%maintenance_file_path%'
            $adminEmail: '%admin_email%'
            $defaultSenderEmail: '%default_sender_email%'
            $resourcesPath: '%resources_path%'
            $resourcesUrl: '%resources_url%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Envoi du mail de contact après la création d'un message de contact
    App\Event\Listener\Entity\SendAdminContactMessageListener:
        tags:
            -
                name: 'doctrine.orm.entity_listener'
                event: 'postPersist'
                entity: 'App\Entity\ContactMessage'

    # Ajout de l'ancien identifiant public pour les classes gérant un historique
    App\Event\Listener\Entity\PublicIdListener:
        tags:
            -  
                name: 'doctrine.event_listener'
                event: 'preUpdate'
            -
                name: 'doctrine.event_listener'
                event: 'postUpdate'

    # Suppression des anciens fichiers uploadés
    App\Event\Listener\DeleteOldUploadedFilesListener:
        tags:
            - name: 'doctrine.event_subscriber'